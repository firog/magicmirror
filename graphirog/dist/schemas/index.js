"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var apollo_server_1 = require("apollo-server");
var typeDefs = apollo_server_1.gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  type LateTrains {\n    lateTrain: [LateTrain]\n  }\n\n  type LateTrain {\n    departureStation: String\n    arrivalStation: String\n    advertisedTimeAtLocation: String\n    productInformation: String\n    estimatedTimeAtLocation: String\n    numberOfMinutesLate: Int\n\n    # AdvertisedTimeAtLocation,\n    #         trainInfo.AdvertisedTrainIdent,\n    #         trainInfo.ProductInformation,\n    #         trainInfo.EstimatedTimeAtLocation,\n    #         numOfMinLate,\n    #         trainInfo.FromLocation.LocationName,\n    #         trainInfo.LocationSignature,\n    #         (trainInfo.departureTime = await getDepartingTrainsInfo(\n    #           trainInfo.FromLocation[0].LocationName,\n    #           trainInfo.AdvertisedTrainIdent,\n    #           new Date(trainInfo.AdvertisedTimeAtLocation)\n    #         )),\n    #         trainInfo.Canceled\n  }\n\n  type PointForecast {\n    longitude: String\n    latitude: String\n    temperature: String\n    windSpeed: String\n    time: String\n    precipitationCategory: Precipitation\n  }\n\n  type PointForecasts {\n    pointForecast: [PointForecast]\n  }\n\n  enum Precipitation {\n    NONE\n    SNOW\n    SNOWRAIN\n    RAIN\n    DRIZZLE\n    FREEZINGRAIN\n    FREEZINGDRIZZLE\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    pointForecast(\n      longitude: String!\n      latitude: String!\n      hour: String!\n    ): PointForecast\n    pointForecasts(longitude: String!, latitude: String!): [PointForecast]\n    lateTrains(fromStation: String, arrivalStation: String): [LateTrain]\n  }\n"], ["\n  type LateTrains {\n    lateTrain: [LateTrain]\n  }\n\n  type LateTrain {\n    departureStation: String\n    arrivalStation: String\n    advertisedTimeAtLocation: String\n    productInformation: String\n    estimatedTimeAtLocation: String\n    numberOfMinutesLate: Int\n\n    # AdvertisedTimeAtLocation,\n    #         trainInfo.AdvertisedTrainIdent,\n    #         trainInfo.ProductInformation,\n    #         trainInfo.EstimatedTimeAtLocation,\n    #         numOfMinLate,\n    #         trainInfo.FromLocation.LocationName,\n    #         trainInfo.LocationSignature,\n    #         (trainInfo.departureTime = await getDepartingTrainsInfo(\n    #           trainInfo.FromLocation[0].LocationName,\n    #           trainInfo.AdvertisedTrainIdent,\n    #           new Date(trainInfo.AdvertisedTimeAtLocation)\n    #         )),\n    #         trainInfo.Canceled\n  }\n\n  type PointForecast {\n    longitude: String\n    latitude: String\n    temperature: String\n    windSpeed: String\n    time: String\n    precipitationCategory: Precipitation\n  }\n\n  type PointForecasts {\n    pointForecast: [PointForecast]\n  }\n\n  enum Precipitation {\n    NONE\n    SNOW\n    SNOWRAIN\n    RAIN\n    DRIZZLE\n    FREEZINGRAIN\n    FREEZINGDRIZZLE\n  }\n\n  # The \"Query\" type is special: it lists all of the available queries that\n  # clients can execute, along with the return type for each. In this\n  # case, the \"books\" query returns an array of zero or more Books (defined above).\n  type Query {\n    pointForecast(\n      longitude: String!\n      latitude: String!\n      hour: String!\n    ): PointForecast\n    pointForecasts(longitude: String!, latitude: String!): [PointForecast]\n    lateTrains(fromStation: String, arrivalStation: String): [LateTrain]\n  }\n"])));
exports.default = typeDefs;
var templateObject_1;
